version: 2
jobs:
  build:
    docker:
      - image: hashicorp/terraform:0.11.13
    environment:
    steps:
      - checkout
      - run:
          name: Check formatting
          command: |
            terraform fmt -check=true -diff=true -list=true
            terraform validate -check-variables=false
  plan:
    docker:
      - image: hashicorp/terraform:0.11.13
    environment:
    steps:
      - checkout
      - run:
          name: Plan Terraform
          working_directory: example
          command: |
            sh ../install.sh
            terraform init
            terraform plan -out=terraform.out
      - persist_to_workspace:
          root: example
          paths:
           - terraform.out
  deploy:
    docker:
      - image: paulgrav/cloudcli
    environment:
    steps:
      - attach_workspace:
          at: /tmp/example
      - checkout
      - run:
          name: Set project name
          command: |
            TF_VAR_project_name="${TF_VAR_project_name}-${CIRCLE_WORKFLOW_ID}"
            source $TF_VAR_project_name
      - run:
          name: Run Terraform
          working_directory: example
          command: |
            sh ../install.sh
            terraform init
            terraform apply /tmp/example/terraform.out
      - run:
          name: Postinstall software
          working_directory: postinstall
          command: |
            sh postinstall.sh ../example/terraform.tfstate
  cleanup:
    docker:
      - image: paulgrav/cloudcli
    environment:
    steps:
      - run:
          name: Set project name
          command: |
            TF_VAR_project_name="${TF_VAR_project_name}-${CIRCLE_WORKFLOW_ID}"
            source $TF_VAR_project_name
      - run:
          name: Cleanup
          command: |
            set +x
            num_failures=0
            pids=( )

            function az_login {
                az login --service-principal -u http://CircleCI -p $TF_VAR_azure_client_secret --tenant $TF_VAR_azure_tenant_id > /dev/null
            }

            function gcp_login {
                gcloud auth activate-service-account --key-file=<(echo $TF_VAR_google_creds_base64 | base64 -d) --project=$TF_VAR_google_project_id 
            }

            function clean_gcp {
                clusters=$(gcloud container clusters list "--format=value[separator=','](name, zone)" --filter="resourceLabels.hydra_project=$TF_VAR_project_name")
                for c in $clusters
                do
                    name=$(echo $c | cut -f 1 -d,)
                    zone=$(echo $c | cut -f 2 -d,)
                    gcloud container clusters delete -q $name --zone $zone & pids+=( $! )
                done
            }

            function clean_azure {
                groTF_VAR_project_nameups=$(az group list --query "[?tags.hydra_project=='$TF_VAR_project_name' && properties.provisioningState != 'Deleting'].name" -o tsv)
                for g in $groups
                do
                    az group delete -y --name $g & pids+=( $! )
                done
            }

            function clean_az_creds {
                app_ids=$(az ad app list --all --query "[?contains(displayName,'$TF_VAR_project_name')].appId" -o tsv)
                for app_id in $app_ids
                do
                    az ad app delete --id $app_id & pids+=( $! )
                done
            }

            function clean_akamai {
                cat << EOF > $HOME/.edgerc
                [default]
                client_secret = $akamai_client_secret
                host = $akamai_host
                access_token = $akamai_access_token
                client_token = $akamai_client_token
            EOF
                http --auth-type edgegrid -a default: GET :/config-gtm/v1/domains/$TF_VAR_edge_dns_zone/datacenters
            }

            function clean_state {
                rm terraform.tfstate
            }

            function clean_gcp_creds {
  
                users=$(gcloud iam service-accounts list --filter="displayName='Registry User'" --format="value(email)")
                for u in $users
                do
                  gcloud iam service-accounts delete -q --project $TF_VAR_google_project_id $u & pids+=( $! )
                done
            }
            
            function clean_gcp_disks {
              disks=$(gcloud compute disks list --filter="name~'TF_VAR_project_name'" --format="value[separator=','](id, zone)")
              for d in $disks
              do
                id=$(echo $d | cut -f 1 -d,)
                zone=$(echo $d | cut -f 2 -d,)
                gcloud compute disks delete -q $id --zone $zone & pids+=( $! )
              done
            }

            function wait_for_processing {
              for pid in "${pids[@]}"; do
                wait "$pid" || (( ++num_failures ))
              done

              if (( num_failures > 0 )); then
                echo "Warning: $num_failures background processes (out of ${#pids[@]} total) failed" >&2
              fi
              pids=( )
            }
            #clean_akamai

            gcp_login
            az_login
            clean_azure
            clean_gcp
            clean_gcp_disks
            wait_for_processing
            clean_az_creds
            clean_gcp_creds
            wait_for_processing
            exit $num_failures
    
workflows:
  version: 2
  build_plan_deploy:
    jobs:
      - build
      - plan:
          requires:
            - build
          filters:
            branches:
              ignore: master
      - deploy:
          requires:
            - plan
          filters:
            branches:
              ignore: master
      - hold:
          requires:
            - deploy
          type: approval
          filters:
            branches:
              ignore: master
      - cleanup:
          requires:
            - hold
          filters:
            branches:
              ignore: master
